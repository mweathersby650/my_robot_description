<?xml version="1.0"?>

<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
    <xacro:property name="base_length" value="0.6" />
    <xacro:property name="base_width" value="0.4" />
    <xacro:property name="base_height" value="0.2" />
    <xacro:property name="wheel_radius" value="0.1" />
    <xacro:property name="wheel_length" value="0.05" />
    <xacro:property name="castor_wheel_radius" value="${wheel_radius / 2.0}" />

    <link name="base_footprint">
    </link>

    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}" />
            </geometry>
            <origin xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" />
            <material name="blue" />
        </visual>
        <collision>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}" />
            </geometry>
            <origin xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" />
        </collision>
        <xacro:box_inertia m="5.0" l="${2*base_length}" w="${2*base_width}" h="${2*base_height}"
            xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" />
    </link>




        <xacro:macro name="wheel_link" params="prefix">
        <link name="${prefix}_wheel_link">
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
                <material name="grey" />
            </visual>
            <collision>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
            </collision>
            <xacro:cylinder_inertia m="1.0" r="${wheel_radius}" h="${2*wheel_length}"
                xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
        </link>
    </xacro:macro>

    <xacro:wheel_link prefix="right" />
    <xacro:wheel_link prefix="left" />


    <link name="castor_wheel_link">
        <visual>
            <geometry>
                <sphere radius="${castor_wheel_radius}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="grey" />
        </visual>
        <collision>
            <geometry>
                <sphere radius="${castor_wheel_radius}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />

        </collision>
        <xacro:sphere_inertia m="0.5" r="${2*castor_wheel_radius}"
            xyz="0 0 0" rpy="0 0 0" />
    </link>

    <joint name="base_joint" type="fixed">

        <parent link="base_footprint" />
        <child link="base_link" />
        <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0" />

    </joint>
    <joint name="base_castor_wheel_joint" type="fixed">
        <parent link="base_link" />
        <child link="castor_wheel_link" />
        <origin xyz="${base_length / 3.0} 0 ${-castor_wheel_radius}" rpy="0 0 0" />
    </joint>

    <joint name="base_right_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="right_wheel_link" />
        <origin xyz="${-base_length / 4.0} ${-(base_width + wheel_length) / 2.0 } 0" rpy="0 0 0" />
        <axis xyz="0 1 0" />
    </joint>
    <joint name="base_left_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="left_wheel_link" />
        <origin xyz="${-base_length / 4.0} ${(base_width + wheel_length) / 2.0 } 0" rpy="0 0 0" />
        <axis xyz="0 1 0" />
    </joint>
    <gazebo reference="base_link">
        <material> Gazebo/Blue </material>
    </gazebo>
    <gazebo reference="right_wheel_link">

        <material> Gazebo/Grey</material>
    </gazebo>
    <gazebo reference="left_wheel_link">
        <material> Gazebo/Grey</material>
    </gazebo>

    <gazebo reference="castor_wheel_link">
        <material> Gazebo/Grey</material>
        <mu1 value="0.1"/>
        <mu2 value="0.1"/>
    </gazebo>



      <gazebo>
    <!-- taken from
     https://raw.githubusercontent.com/ros-simulation/gazebo_ros_pkgs/refs/heads/ros2/gazebo_plugins/include/gazebo_plugins/gazebo_ros_diff_drive.hpp 
    -->
        <plugin name="diff_drive_controller" filename="libgazebo_ros_diff_drive.so">

            <!-- Update rate in Hz -->
            <update_rate>50</update_rate>

            <!-- wheels -->
            <left_joint>base_left_wheel_joint</left_joint>
            <right_joint>base_right_wheel_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>0.45</wheel_separation> <!-- dstince 0.4 + 0.5 base_width + length of cyclnder-->
            <wheel_diameter>0.2</wheel_diameter> <!-- wheel_radius * 2-->

            <!-- input -->
            <command_topic>cmd_vel</command_topic>

            <!-- output -->
            <publish_odom>true</publish_odom> <!-- odementry to know where the robot is relative to the origin-->
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>

            <odometry_topic>odom</odometry_topic>
            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_footprint</robot_base_frame> <!-- root frame of the robot, aka the base_footprint link-->

        </plugin>
    </gazebo>
</robot>